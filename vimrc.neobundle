if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" You can specify revision/branch/tag.
"NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

" ─────────────────────────────────────────────────────────────────────────────
NeoBundle 'fabi1cazenave/suckless.vim'
NeoBundle 'jamessan/vim-gnupg'

"NeoBundle 'bling/vim-airline'
"let g:airline_theme='base16'
"let s:load_the_theme = g:airline#themes#{g:airline_theme}#normal
"let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'

NeoBundle 'Raimondi/delimitMate'
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
au FileType clojure let g:delimitMate_expand_cr = 0
au FileType clojure let g:delimitMate_expand_space = 0
au FileType vim let g:delimitMate_smart_quotes = 0

"NeoBundle 'nathanaelkane/vim-indent-guides'
"let g:indent_guides_auto_colors = 0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=8
"hi IndentGuidesOdd  ctermbg=0
"hi IndentGuidesEven ctermbg=8
"let g:indent_guides_guide_size = 4
"let g:indent_guides_start_level = 2

NeoBundle 'kien/ctrlp.vim'
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_extensions = ['tag']
map <C-i> :CtrlPTag <CR>

NeoBundle 'shougo/neocomplete.vim'
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

"NeoBundle 'tpope/vim-fugitive'
NeoBundle 'mileszs/ack.vim'

"NeoBundle 'scrooloose/nerdtree'
"nmap <F4> :NERDTreeToggle<CR>

"NeoBundle 'majutsushi/tagbar'
"nmap <F7> :TagbarToggle<CR>

"NeoBundle 'rust-lang/rust.vim'

NeoBundle 'derekwyatt/vim-scala'
let g:scala_sort_across_groups=1
let g:scala_first_party_namespaces=
  \ '\(controllers\|events\|json|\kafka\|models\|modules\|security\|services\)'

NeoBundle 'gre/play2vim'

"NeoBundle 'osef/eclim'
"let g:EclimCompletionMethod = 'omnifunc'
"let g:EclimQuickfixSignText = '✓ '
"let g:EclimLoclistSignText = '✗ '

NeoBundle 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_error_symbol = '✗'
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': []  }
nnoremap <Leader>c :SyntasticCheck<Enter>

" Required by vim-cljfmt and vim-eastwood
NeoBundle 'tpope/vim-fireplace'
" Required by vim-fireplace to fint `lein repl` connection
NeoBundle 'tpope/vim-salve'
" Code formatting, requires vim-fireplace
NeoBundle 'venantius/vim-cljfmt'
let g:clj_fmt_autosave = 0
nnoremap <Leader>= :Cljfmt<Enter>

" Namespace generation, requires vim-fireplace
NeoBundle 'guns/vim-slamhound'
"nnoremap <LocalLeader>n :Slamhound<CR>

" Clojure lint tool, requires syntastic and vim-fireplace
NeoBundle 'venantius/vim-eastwood'

" Must test: !!!
"NeoBundle 'Shougo/neosnippet.vim'
"NeoBundle 'Shougo/neosnippet-snippets'


" ─────────────────────────────────────────────────────────────────────────────

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
